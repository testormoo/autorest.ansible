@using AutoRest.Ansible.Templates
@using System.Linq
@using AutoRest.Core.Model
@using AutoRest.Core.Utilities
@using AutoRest.Ansible
@using AutoRest.Ansible.Model
@inherits AutoRest.Ansible.PythonTemplate<AutoRest.Ansible.Model.CodeModelAnsibleMap>
#!/usr/bin/python
#
# Copyright (c) @(Model.YearAdded) @(Model.Author), <@(Model.AuthorEmail)>
#
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
@EmptyLine
from __future__ import absolute_import, division, print_function
__metaclass__ = type
@EmptyLine
@EmptyLine
ANSIBLE_METADATA = {'metadata_version': '1.1',
                    'status': ['preview'],
                    'supported_by': 'community'}
@EmptyLine
@EmptyLine
DOCUMENTATION = '''
---
module: @(Model.ModuleNameAlt)
version_added: "@(Model.VersionAdded)"
short_description: Manage @(Model.ObjectName) instance.
description:
    - Create, update and delete instance of @(Model.ObjectName).
@EmptyLine
options:
@foreach (var line in Model.ModuleDocumentation)
{
@:@(line)
}
@if (Model.NeedsForceUpdate)
{
@:    force_update:
@:      description:
@:          - @(Model.ObjectName) will be updated if given parameters differ from existing resource state.
@:          - To force @(Model.ObjectName) update in any circumstances set this parameter to True.
@:      type: bool
}
    state:
      description:
        - Assert the state of the @(Model.ObjectName).
        - Use 'present' to create or update an @(Model.ObjectName) and 'absent' to delete it.
      default: present
      choices:
        - absent
        - present
@EmptyLine
extends_documentation_fragment:
    - azure
@if (Model.HasTags())
{
@:    - azure_tags
}
@EmptyLine
author:
    - "@(Model.Author) (@(Model.AuthorIRC))"
@EmptyLine
'''
@EmptyLine
EXAMPLES = '''
@foreach (var line in Model.ModuleExamples)
{
    if (line != "")
    {
@:@(line)
    }
    else
    {
@EmptyLine
    }
}
'''
@EmptyLine
RETURN = '''
@foreach (var line in Model.ModuleDocumentationReturn)
{
@:@(line)
}
'''
@EmptyLine
import time
from ansible.module_utils.azure_rm_common import AzureRMModuleBase
@EmptyLine
try:
    from msrestazure.azure_exceptions import CloudError
    from msrest.polling import LROPoller
    from msrestazure.azure_operation import AzureOperationPoller
    from @(Model.MgmtClientImportPath) import @(Model.MgmtClientName)
    from msrest.serialization import Model
except ImportError:
    # This is handled in azure_rm_common
    pass 
@EmptyLine
@EmptyLine
class Actions:
    NoAction, Create, Update, Delete = range(4)
@EmptyLine
@EmptyLine
class AzureRM@(Model.ModuleOperationNameUpper)(AzureRMModuleBase):
    """Configuration class for an Azure RM @(Model.ObjectName) resource"""
@EmptyLine
    def __init__(self):
        self.module_arg_spec = dict(
@foreach (var v in Model.GetModuleArgSpec(true))
{
@:            @(v)
}
        )
@EmptyLine
@foreach (var v in Model.ModuleTopLevelOptionsVariables)
{
@:        @(v)
}
@EmptyLine
        self.results = dict(changed=False)
        self.mgmt_client = None
        self.state = None
        self.to_do = Actions.NoAction
@EmptyLine
        super(AzureRM@(Model.ModuleOperationNameUpper), self).__init__(derived_arg_spec=self.module_arg_spec,
                                      @(CodeModelAnsible.Indent(Model.ModuleOperationNameUpper))supports_check_mode=True,
@if (Model.HasTags())
{
@:                                      @(CodeModelAnsible.Indent(Model.ModuleOperationNameUpper))supports_tags=True)
}
else
{
@:                                      @(CodeModelAnsible.Indent(Model.ModuleOperationNameUpper))supports_tags=False)
}
@EmptyLine
    def exec_module(self, **kwargs):
        """Main module execution method"""
@EmptyLine
        for key in list(self.module_arg_spec.keys()) + ['tags']:
            if hasattr(self, key):
                setattr(self, key, kwargs[key])
            elif kwargs[key] is not None:
                self.@(Model.ParametersOptionName)[key] = kwargs[key]
@EmptyLine
@{
    foreach (var o in Model.AdjustmentStatements)
    {
@:        @(o)
    }
}
@EmptyLine
        response = None
@EmptyLine
        self.mgmt_client = self.get_mgmt_svc_client(@(Model.MgmtClientName),
@if (Model.ApiVersion != null && Model.ApiVersion != "")
{
@:                                                    base_url=self._cloud_environment.endpoints.resource_manager,
@:                                                    api_version='@(Model.ApiVersion)')
}
else
{
@:                                                    base_url=self._cloud_environment.endpoints.resource_manager)
}
@if (Model.HasResourceGroup())
{
@EmptyLine
@:        resource_group = self.get_resource_group(self.@(Model.ModuleResourceGroupName))
}
@EmptyLine
@{
    string locationDisposition = Model.LocationDisposition;
    if (null != locationDisposition)
    {
        if (locationDisposition == "parameters")
        {
@:        if "location" not in self.parameters:
@:            self.parameters["location"] = resource_group.location
@EmptyLine
        }
        else if (locationDisposition == "default")
        {
@:        if self.location is None:
@:            self.location = resource_group.location
@EmptyLine
        }
    }
}
        old_response = self.get_@(Model.ObjectNamePythonized)()
@EmptyLine
        if not old_response:
            self.log("@(Model.ObjectName) instance doesn't exist")

            if self.state == 'absent':
                self.log("Old instance didn't exist")
            else:
                self.to_do = Actions.Create
        else:
            self.log("@(Model.ObjectName) instance already exists")

            if self.state == 'absent':
                self.to_do = Actions.Delete
            elif self.state == 'present':
@{
    string[] idempotence = Model.ModuleIdempotencyCheck;
    if (idempotence.Length != 0)
    {
@:                if (not default_compare(self.@(Model.ParametersOptionName), old_response, '', {
        foreach (var o in idempotence)
        {
@:                @(o)
        }
@:                       })):
@:                    self.to_do = Actions.Update
    }
    else
    {
@:                if (not default_compare(self.@(Model.ParametersOptionName), old_response, '')):
@:                    self.to_do = Actions.Update
    }
}
@{
    if (Model.NeedsDeleteBeforeUpdate)
    {
        if (Model.NeedsForceUpdate)
        {
@:        if self.to_do == Actions.Update:
@:            if self.force_update:
@:                if not self.check_mode:
@:                    self.delete_@(Model.ObjectNamePythonized)()
@:            else:
@:                self.to_do = Actions.NoAction
        }
        else
        {
@:        if self.to_do == Actions.Update:
@:            self.delete_@(Model.ObjectNamePythonized)()
        }
    }
}
@EmptyLine
        if (self.to_do == Actions.Create) or (self.to_do == Actions.Update):
            self.log("Need to Create / Update the @(Model.ObjectName) instance")
@EmptyLine
            if self.check_mode:
                self.results['changed'] = True
                return self.results
@EmptyLine
            response = self.create_update_@(Model.ObjectNamePythonized)()
@EmptyLine
            self.results['changed'] = True
            self.log("Creation / Update done")
        elif self.to_do == Actions.Delete:
            self.log("@(Model.ObjectName) instance deleted")
            self.results['changed'] = True
@EmptyLine
            if self.check_mode:
                return self.results
@EmptyLine
            self.delete_@(Model.ObjectNamePythonized)()

            # make sure instance is actually deleted, for some Azure resources, instance is hanging around
            # for some time after deletion -- this should be really fixed in Azure.
            while self.get_@(Model.ObjectNamePythonized)():
                time.sleep(20)
        else:
            self.log("@(Model.ObjectName) instance unchanged")
            self.results['changed'] = False
            response = old_response
@EmptyLine
        if self.state == 'present':
            self.results.update(self.format_item(response))
        return self.results
@EmptyLine
    def create_update_@(Model.ObjectNamePythonized)(self):
        '''
        Creates or updates @(Model.ObjectName) with the specified configuration.
@EmptyLine
        :return: deserialized @(Model.ObjectName) instance state dictionary
        '''
        self.log("Creating / Updating the @(Model.ObjectName) instance {0}".format(self.@(Model.ModuleResourceName)))
@EmptyLine
        try:
@if (Model.HasCreateOrUpdate())
{
    foreach (var line in Model.ModuleGenerateApiCall("            ", "create_or_update"))
    {
@:@line
    }
}
else
{
@:            if self.to_do == Actions.Create:
    foreach (var line in Model.ModuleGenerateApiCall("            ", "create"))
    {
@:    @line
    }
@:            else:
    foreach (var line in Model.ModuleGenerateApiCall("            ", "update"))
    {
@:    @line
    }
}
            if isinstance(response, LROPoller) or isinstance(response, AzureOperationPoller):
                response = self.get_poller_result(response)
@EmptyLine
        except CloudError as exc:
            self.log('Error attempting to create the @(Model.ObjectName) instance.')
            self.fail("Error creating the @(Model.ObjectName) instance: {0}".format(str(exc)))
        return response.as_dict()
@EmptyLine
    def delete_@(Model.ObjectNamePythonized)(self):
        '''
        Deletes specified @(Model.ObjectName) instance in the specified subscription and resource group.
@EmptyLine
        :return: True
        '''
        self.log("Deleting the @(Model.ObjectName) instance {0}".format(self.@(Model.ModuleResourceName)))
        try:
@foreach (var line in Model.ModuleGenerateApiCall("            ", "delete"))
{
@:@line
}
        except CloudError as e:
            self.log('Error attempting to delete the @(Model.ObjectName) instance.')
            self.fail("Error deleting the @(Model.ObjectName) instance: {0}".format(str(e)))
@EmptyLine
        return True
@EmptyLine
    def get_@(Model.ObjectNamePythonized)(self):
        '''
        Gets the properties of the specified @(Model.ObjectName).
@EmptyLine
        :return: deserialized @(Model.ObjectName) instance state dictionary
        '''
        self.log("Checking if the @(Model.ObjectName) instance {0} is present".format(self.@(Model.ModuleResourceName)))
        found = False
        try:
@foreach (var line in Model.ModuleGenerateApiCall("            ", "get"))
{
@:@line
}
            found = True
            self.log("Response : {0}".format(response))
            self.log("@(Model.ObjectName) instance : {0} found".format(response.name))
        except CloudError as e:
            self.log('Did not find the @(Model.ObjectName) instance.')
        if found is True:
            return response.as_dict()
@EmptyLine
        return False
@EmptyLine
    def format_item(self, d):
        d = {
@foreach (var line in Model.ModuleReturnResponseDictionary)
{
@:@(line)
}
        }
        return d
@EmptyLine
@EmptyLine
def default_compare(new, old, path):
    if new is None:
        return True
    elif isinstance(new, dict):
        if not isinstance(old, dict):
            return False
        for k in new.keys():
            if not default_compare(new.get(k), old.get(k, None), path + '/' + k):
                return False
        return True
    elif isinstance(new, list):
        if not isinstance(old, list) or len(new) != len(old):
            return False
        if isinstance(old[0], dict):
            key = None
            if 'id' in old[0] and 'id' in new[0]:
                key = 'id'
            elif 'name' in old[0] and 'name' in new[0]:
                key = 'name'
            new = sorted(new, key=lambda x: x.get(key, None))
            old = sorted(old, key=lambda x: x.get(key, None))
        else:
            new = sorted(new)
            old = sorted(old)
        for i in range(len(new)):
            if not default_compare(new[i], old[i], path + '/*'):
                return False
        return True
    else:
        return new == old
@EmptyLine
@EmptyLine
def expand_and_rename(d, path, **kwargs):
    expand = kwargs.get('expand', None)
    rename = kwargs.get('rename', None)
    camelize = kwargs.get('camelize', False)
    if isinstance(d, list):
        for i in range(len(d)):
            expand_and_rename(d[i], path, **kwargs)
    elif isinstance(d, dict):
        if len(path) == 1:
            old_name = path[0]
            if expand is None:
                # just rename
                old_value = d.get(old_name, None)
                if old_value is not None:
                    d.pop(old_name, None)
                    d[rename] = old_value
            else:
                # expand and rename
                old_value = d.get(old_name, None)
                if old_value is not None:
                    d[expand] = d.get(expand, {})
                    d.get(expand, {})[rename if (rename is not None) else old_name] = old_value
                    d.pop(old_name, None)
        else:
            sd = d.get(path[0], None)
            if sd is not None:
                expand_and_rename(sd, path[1:], **kwargs)
@EmptyLine
@EmptyLine
@if (Model.IsSnakeToCamelNeeded)
{
@:def _snake_to_camel(snake, capitalize_first=False):
@:    if capitalize_first:
@:        return ''.join(x.capitalize() or '_' for x in snake.split('_'))
@:    else:
@:        return snake.split('_')[0] + ''.join(x.capitalize() or '_' for x in snake.split('_')[1:])
@EmptyLine
@EmptyLine
}
def main():
    """Main execution"""
    AzureRM@(Model.ModuleOperationNameUpper)()
@EmptyLine
@EmptyLine
if __name__ == '__main__':
    main()
