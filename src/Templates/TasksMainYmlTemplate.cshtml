@using AutoRest.Ansible.Templates
@using System.Linq
@using AutoRest.Core.Model
@using AutoRest.Core.Utilities
@using AutoRest.Ansible
@using AutoRest.Ansible.Model
@inherits AutoRest.Ansible.PythonTemplate<AutoRest.Ansible.Model.CodeModelAnsibleMap>
- name: Prepare random number
  set_fact:
    rpfx: "{{ resource_group | hash('md5') | truncate(7, True, '') }}{{ 1000 | random }}"
  run_once: yes
@if (Model.HasPrerequisites())
{
@EmptyLine
    foreach (var line in Model.GetModuleTestPrerequisites(true, true))
    {
@:@(line)
    }
}
@EmptyLine
@foreach (var line in Model.GetModuleTestCreate(true))
{
@:@(line)
}
  check_mode: yes
  register: output
- name: Assert the resource instance is well created
  assert:
    that:
      - output.changed
@EmptyLine
@foreach (var line in Model.GetModuleTestCreate())
{
@:@(line)
}
  register: output
- name: Assert the resource instance is well created
  assert:
    that:
      - output.changed
@if (Model.AssertStateVariable != "")
{
@:      - output.@(Model.AssertStateVariable) == '@(Model.AssertStateExpectedValue)'
}
@if (Model.CanTestUpdate())
{
@EmptyLine
foreach (var line in Model.ModuleTestUpdate)
{
@:@(line)
}
@:  register: output
@:- name: Assert the state has not changed
@:  assert:
@:    that:
@:      - output.changed == false
    if(Model.AssertStateVariable != "")
    {
@:      - output.@(Model.AssertStateVariable) == '@(Model.AssertStateExpectedValue)'
    }
    }
@if (Model.CanDelete())
{
@EmptyLine
    foreach (var line in Model.ModuleTestDeleteCheckMode)
    {
@:@(line)
    }
@:  check_mode: yes
@:  register: output
@:- name: Assert the state has changed
@:  assert:
@:    that:
@:      - output.changed
@EmptyLine
    foreach (var line in Model.ModuleTestDelete)
    {
@:@(line)
    }
@:  register: output
@:- name: Assert the state has changed
@:  assert:
@:    that:
@:      - output.changed
@EmptyLine
    foreach (var line in Model.GetModuleTestDelete(true, false))
    {
@:@(line)
    }
@:  register: output
@:- name: Assert the state has changed
@:  assert:
@:    that:
@:      - output.changed == false
}
@if (Model.HasPrerequisites())
{
@EmptyLine
    foreach (var line in Model.GetModuleTestDeleteClearPrerequisites(true, true))
    {
@:@(line)
    }
}
