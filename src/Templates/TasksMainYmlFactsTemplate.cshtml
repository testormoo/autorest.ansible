@using AutoRest.Ansible.Templates
@using System.Linq
@using AutoRest.Core.Model
@using AutoRest.Core.Utilities
@using AutoRest.Ansible
@using AutoRest.Ansible.Model
@inherits AutoRest.Ansible.PythonTemplate<AutoRest.Ansible.Model.CodeModelAnsibleMap>
- name: Prepare random number
  set_fact:
    rpfx: "{{ 1000 | random }}{{ resource_group | hash('md5') | truncate(7, True, '') }}"
  run_once: yes
@if (Model.HasPrerequisites())
{
@EmptyLine
    foreach (var line in Model.GetModuleTestPrerequisites(true, true))
    {
@:@(line)
    }
    if (Model.GetModuleCanDeletePrerequisites())
    {
        foreach (var line in Model.GetModuleTestPrerequisites(true, false, "second"))
        {
@:@(line)
        }
    }
}
@for (int testIdx = 0; testIdx < Model.GetModuleFactTestCount(); testIdx++)
{
@EmptyLine
foreach (var line in Model.GetModuleFactTest(testIdx))
{
@:@(line)
}
@:  register: output
@:- name: Assert that facts are returned
@:  assert:
@:    that:
@:      - output.changed == False
@:      - output.@(Model.ModuleOperationName + "." + Model.FindResourceNameInTest()).id != None
    if (Model.IsModuleFactsTestMulti(testIdx) && Model.GetModuleCanDeletePrerequisites())
    {
@:      - output.@(Model.ModuleOperationName + "." + Model.FindResourceNameInTest())second.id != None
    }
}
@if (Model.HasPrerequisites() && Model.GetModuleCanDeletePrerequisites())
{
@EmptyLine
    foreach (var line in Model.GetModuleTestDeleteClearPrerequisites(true, false))
    {
@:@(line)
    }
    foreach (var line in Model.GetModuleTestDeleteClearPrerequisites(true, false, "second"))
    {
@:@(line)
    }
for (int testIdx = 0; testIdx < Model.GetModuleFactTestCount(); testIdx++)
{
@EmptyLine
    foreach (var line in Model.GetModuleFactTest(testIdx, "unexisting"))
    {
@:@(line)
    }
@:  register: output
@:- name: Assert that empty dictionary was returned
@:  assert:
@:    that:
@:      - output.changed == False
@:      - "'@(Model.FindResourceNameInTest())' not in output.@(Model.ModuleOperationName)" 
@:      - "'@(Model.FindResourceNameInTest())second' not in output.@(Model.ModuleOperationName)"
}
@EmptyLine
    foreach (var line in Model.GetModuleTestDeleteClearPrerequisites(false, true))
    {
@:@(line)
    }
    foreach (var line in Model.GetModuleTestDeleteClearPrerequisites(false, true, "second"))
    {
@:@(line)
    }
}
