@using AutoRest.Ansible.Templates
@using System.Linq
@using AutoRest.Core.Model
@using AutoRest.Core.Utilities
@using AutoRest.Ansible
@using AutoRest.Ansible.Model
@inherits AutoRest.Ansible.PythonTemplate<AutoRest.Ansible.Model.CodeModelAnsibleMap>
#!/usr/bin/python
#
# Copyright (c) @(Model.YearAdded) @(Model.Author), <@(Model.AuthorEmail)>
#
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
@EmptyLine
from __future__ import absolute_import, division, print_function
__metaclass__ = type
@EmptyLine
@EmptyLine
ANSIBLE_METADATA = {'metadata_version': '1.1',
                    'status': ['preview'],
                    'supported_by': 'community'}
@EmptyLine
@EmptyLine
DOCUMENTATION = '''
---
module: @(Model.ModuleNameAlt)
version_added: "@(Model.VersionAdded)"
short_description: Get Azure @(Model.ObjectName) facts.
description:
    - Get facts of Azure @(Model.ObjectName).
@EmptyLine
options:
@foreach (var line in Model.ModuleDocumentation)
{
@:@(line)
}
@if (Model.HasTags())
{
@:    tags:
@:        description:
@:            - Limit results by providing a list of tags. Format tags as 'key' or 'key:value'.
@:
}
@EmptyLine
extends_documentation_fragment:
    - azure
@EmptyLine
author:
    - "@(Model.Author) (@(Model.AuthorIRC))"
@EmptyLine
'''
@EmptyLine
EXAMPLES = '''
@foreach (var line in Model.ModuleExamplesFacts)
{
    if (line != "")
    {
@:@(line)
    }
    else
    {
@EmptyLine
    }
}
'''
@EmptyLine
RETURN = '''
@foreach (var line in Model.ModuleDocumentationReturnFacts)
{
@:@(line)
}
'''
@EmptyLine
from ansible.module_utils.azure_rm_common import AzureRMModuleBase
@EmptyLine
try:
    from msrestazure.azure_exceptions import CloudError
    from @(Model.MgmtClientImportPath) import @(Model.MgmtClientName)
    from msrest.serialization import Model
except ImportError:
    # This is handled in azure_rm_common
    pass 
@EmptyLine
@EmptyLine
class AzureRM@(Model.ModuleOperationNameUpper)Facts(AzureRMModuleBase):

    def __init__(self):

        # define user inputs into argument
        self.module_arg_spec = dict(
@foreach (var v in Model.GetModuleArgSpec(false))
{
@:            @(v)
}
        )

        # store the results of the module operation
        self.results = dict(
            changed=False
        )
@if (Model.MgmtClient == null)
{        
@:        self.mgmt_client = None
}
@foreach (var v in Model.ModuleOptions)
{
@:        self.@(v.NameAlt) = None
}
@if (Model.HasTags())
{
@:        self.tags = None
}

        super(AzureRM@(Model.ModuleOperationNameUpper)Facts, self).__init__(self.module_arg_spec, supports_tags=False)
@EmptyLine
@//
@//
@// main exec_mofule method is generated here
@//
@//
    def exec_module(self, **kwargs):

        for key in self.module_arg_spec:
            setattr(self, key, kwargs[key])
@if (Model.MgmtClient == null)
{        
@:        self.mgmt_client = self.get_mgmt_svc_client(@(Model.MgmtClientName),
    if (Model.ApiVersion != null && Model.ApiVersion != "")
    {
@:                                                    base_url=self._cloud_environment.endpoints.resource_manager,
@:                                                    api_version='@(Model.ApiVersion)')
    }
    else
    {
@:                                                    base_url=self._cloud_environment.endpoints.resource_manager)
    }
}
@EmptyLine
@//
@//
@// main if statement that is checking parameters and calling appropriate get(), list(), list_by_...() functions
@//
@//
@foreach (var line in Model.GenerateFactsMainIfStatement())
{
@:        @(line)
}
        return self.results
@//
@//
@// all the module methods, like get() list_by_...(), et.c are genetated here
@//
@//
@foreach (var m in Model.ModuleMethods)
{
@EmptyLine
@:    def @(m.Name)(self):
@:        response = None
@:        results = []
@:        try:
foreach (var line in Model.ModuleGenerateApiCall("            ", m.Name))
{
@:@line
}
@:            self.log("Response : {0}".format(response))
@:        except CloudError as e:
@:            self.log('Could not get facts for @(Model.ModuleOperationNameUpper).')
@EmptyLine
if (m.Name.Contains("list"))
    {
@:        if response is not None:
@:            for item in response:
    if (Model.HasTags())
    {
@:                if self.has_tags(item.tags, self.tags):
@:                    results.append(self.format_item(item))
    }
    else
    {
@:                results.append(self.format_item(item))
    }
}
else
{
    if (Model.HasTags())
    {
@:        if response and self.has_tags(response.tags, self.tags):
@:            results.append(self.format_item(response))
    }
    else
    {
@:        if response is not None:
@:            results.append(self.format_item(response))
    }
}
@EmptyLine
@:        return results
}
@EmptyLine
@//
@//
@// format_item function uses by all the methods above is generated here
@//
@//
    def format_item(self, item):
        d = item.as_dict()
        d = {
            'resource_group': self.resource_group,
@foreach (var line in Model.ModuleReturnResponseDictionary)
{
@:@(line)
}
        }
        return d
@EmptyLine
@EmptyLine
@//
@//
@// module main() function
@//
@//
def main():
    AzureRM@(Model.ModuleOperationNameUpper)Facts()
@EmptyLine
@EmptyLine
if __name__ == '__main__':
    main()
