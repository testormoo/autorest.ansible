@using AutoRest.Ansible.vanilla.Templates
@using System.Linq
@using AutoRest.Core.Model
@using AutoRest.Core.Utilities
@using AutoRest.Ansible
@using AutoRest.Ansible.Model
@inherits AutoRest.Ansible.PythonTemplate<AutoRest.Ansible.Model.CodeModelAnsibleMap>
#!/usr/bin/python
#
# Copyright (c) 2017 Zim Kalinowski, <zikalino@microsoft.com>
#
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
@EmptyLine
from __future__ import absolute_import, division, print_function
__metaclass__ = type
@EmptyLine
@EmptyLine
ANSIBLE_METADATA = {'metadata_version': '1.1',
                    'status': ['preview'],
                    'supported_by': 'community'}
@EmptyLine
@EmptyLine
DOCUMENTATION = '''
---
module: @(Model.ModuleNameAlt)
version_added: "2.5"
short_description: Manage @(Model.ObjectName) instance
description:
    - Create, update and delete instance of @(Model.ObjectName)
@EmptyLine
options:
@foreach (var line in Model.ModuleHelp)
{
@:@(line)
}
@EmptyLine
extends_documentation_fragment:
    - azure
    - azure_tags
@EmptyLine
author:
    - "Zim Kalinowski (@@zikalino)"
@EmptyLine
'''
@EmptyLine
EXAMPLES = '''
@foreach (var line in Model.ModuleExamples)
{
@:@(line)
}
'''
@EmptyLine
RETURN = '''
state:
    description: Current state of @(Model.ObjectName)
    returned: always
    type: complex
    contains:
@foreach (var line in Model.ModuleReturnResponseFields)
{
@:@(line)
}
'''
@EmptyLine
from ansible.module_utils.azure_rm_common import AzureRMModuleBase
@EmptyLine
try:
    from msrestazure.azure_exceptions import CloudError
    from msrestazure.azure_operation import AzureOperationPoller
    from @(Model.MgmtClientImportPath) import @(Model.MgmtClientName)
    from msrest.serialization import Model
except ImportError:
    # This is handled in azure_rm_common
    pass 
@EmptyLine
@EmptyLine
class Actions:
    NoAction, Create, Update, Delete = range(4)
@EmptyLine
@EmptyLine
class AzureRM@(Model.ModuleOperationNameUpper)(AzureRMModuleBase):
    """Configuration class for an Azure RM @(Model.ObjectName) resource"""
@EmptyLine
    def __init__(self):
        self.module_arg_spec = dict(
@foreach (var param in Model.ModuleOptions)
{
@:            @(param.NameAlt)=dict(
@:                type='@(param.Type)',
@:                required=@(param.Required)
@:            ),
}
            state=dict(
                type='str',
                required=False,
                default='present',
                choices=['present', 'absent']
            )
        )
@EmptyLine
@foreach (var v in Model.ModuleOptionsUnflattened)
{
@:        self.@(v.NameAlt) = @(v.VariableValue)
}
@EmptyLine
        self.results = dict(changed=False, state=dict())
        self.mgmt_client = None
        self.state = None
        self.to_do = Actions.NoAction
@EmptyLine
        super(AzureRM@(Model.ModuleOperationNameUpper), self).__init__(derived_arg_spec=self.module_arg_spec,
                                      @(CodeModelAnsible.Indent(Model.ModuleOperationNameUpper))supports_check_mode=True,
                                      @(CodeModelAnsible.Indent(Model.ModuleOperationNameUpper))supports_tags=True)
@EmptyLine
    def exec_module(self, **kwargs):
        """Main module execution method"""
@EmptyLine
        for key in list(self.module_arg_spec.keys()) + ['tags']:
            if hasattr(self, key):
                setattr(self, key, kwargs[key])
@foreach (var o in Model.ModuleOptionsSecondLevel)
{
@:            elif key == "@(o.NameAlt)":
@:                self.@(o.Disposition)["@(o.Name)"] = kwargs[key]
}
@EmptyLine
@if (Model.FixParameterStatements.Length > 0)
{
@:        self.adjust_parameters()
@EmptyLine
}
        old_response = None
        results = dict()
@EmptyLine
        self.mgmt_client = self.get_mgmt_svc_client(@(Model.MgmtClientName),
                                                    base_url=self._cloud_environment.endpoints.resource_manager)
@EmptyLine
        try:
            resource_group = self.get_resource_group(self.@(Model.ModuleResourceGroupName))
        except CloudError:
            self.fail('resource group {0} not found'.format(self.@(Model.ModuleResourceGroupName)))
@EmptyLine
@{
    string locationDisposition = Model.LocationDisposition;
    if (null != locationDisposition)
    {
@:        if not self.@(locationDisposition).has_key("location"):
@:            self.@(locationDisposition)["location"] = resource_group.location
@EmptyLine
    }
}
        old_response = self.get_@(Model.ObjectNamePythonized)()
@EmptyLine
        if not old_response:
            self.log("@(Model.ObjectName) instance doesn't exist")

            if self.state == 'absent':
                self.log("Old instance didn't exist")
            else:
                self.to_do = Actions.Create
        else:
            self.log("@(Model.ObjectName) instance already exists")

            if self.state == 'absent':
                self.to_do = Actions.Delete
            elif self.state == 'present':
                self.log("Need to check if @(Model.ObjectName) instance has to be deleted or may be updated")
@{
    foreach (var rule in Model.GetUpdateCheckRules())
    {
@:                @(rule)
    }
    if (Model.NeedsDeleteBeforeUpdate)
    {
@:                self.delete_@(Model.ObjectNamePythonized)()
    }
}
@EmptyLine
        if (self.to_do == Actions.Create) or (self.to_do == Actions.Update):
            self.log("Need to Create / Update the @(Model.ObjectName) instance")
@EmptyLine
            if self.check_mode:
                return self.results
@EmptyLine
            self.results['state'] = self.create_update_@(Model.ObjectNamePythonized)()
            if not old_response:
                self.results['changed'] = True
            else:
                self.results['changed'] = old_response.__ne__(self.results['state'])
@EmptyLine
@{
    var stmts = Model.DeleteResponseFieldStatements;

    if (stmts.Length > 0)
    {

@:            # remove unnecessary fields from return state
        foreach (var s in stmts)
        {
@:            @(s)
        }
    }
}
            self.log("Creation / Update done")
        elif self.to_do == Actions.Delete:
            self.log("@(Model.ObjectName) instance deleted")
            self.delete_@(Model.ObjectNamePythonized)()
            self.results['changed'] = True
        else:
            self.log("@(Model.ObjectName) instance unchanged")
            self.results['state'] = old_response
            self.results['changed'] = False
@EmptyLine
        return self.results
@if (Model.FixParameterStatements.Length > 0)
{
@EmptyLine
@:    def adjust_parameters(self):
    foreach (var s in Model.FixParameterStatements)
    {
@:        @(s)
    }
@EmptyLine
@:    def rename_key(self, d, old_name, new_name):
@:        old_value = d.get(old_name, None)
@:        if old_value is not None:
@:            d.pop(old_name, None)
@:            d[new_name] = old_value;
}
@EmptyLine
    def create_update_@(Model.ObjectNamePythonized)(self):
        '''
        Creates or updates @(Model.ObjectName) with the specified configuration.
@EmptyLine
        :return: deserialized @(Model.ObjectName) instance state dictionary
        '''
        self.log("Creating / Updating the @(Model.ObjectName) instance {0}".format(self.@(Model.ModuleResourceName)))
@EmptyLine
        try:
@if (Model.HasCreateOrUpdate())
{
    foreach (var line in Model.ModuleGenerateApiCall("            ", "create_or_update"))
    {
@:@line
    }
}
else
{
@:            if self.to_do == Actions.Create:
    foreach (var line in Model.ModuleGenerateApiCall("            ", "create"))
    {
@:    @line
    }
@:            else:
    foreach (var line in Model.ModuleGenerateApiCall("            ", "update"))
    {
@:    @line
    }
}
            if isinstance(response, AzureOperationPoller):
                response = self.get_poller_result(response)
@EmptyLine
        except CloudError as exc:
            self.log('Error attempting to create the @(Model.ObjectName) instance.')
            self.fail("Error creating the @(Model.ObjectName) instance: {0}".format(str(exc)))
        return response.as_dict()
@EmptyLine
    def delete_@(Model.ObjectNamePythonized)(self):
        '''
        Deletes specified @(Model.ObjectName) instance in the specified subscription and resource group.
@EmptyLine
        :return: True
        '''
        self.log("Deleting the @(Model.ObjectName) instance {0}".format(self.@(Model.ModuleResourceName)))
        try:
@foreach (var line in Model.ModuleGenerateApiCall("            ", "delete"))
{
@:@line
}
        except CloudError as e:
            self.log('Error attempting to delete the @(Model.ObjectName) instance.')
            self.fail("Error deleting the @(Model.ObjectName) instance: {0}".format(str(e)))
@EmptyLine
        return True
@EmptyLine
    def get_@(Model.ObjectNamePythonized)(self):
        '''
        Gets the properties of the specified @(Model.ObjectName).
@EmptyLine
        :return: deserialized @(Model.ObjectName) instance state dictionary
        '''
        self.log("Checking if the @(Model.ObjectName) instance {0} is present".format(self.@(Model.ModuleResourceName)))
        found = False
        try:
@foreach (var line in Model.ModuleGenerateApiCall("            ", "get"))
{
@:@line
}
            found = True
            self.log("Response : {0}".format(response))
            self.log("@(Model.ObjectName) instance : {0} found".format(response.name))
        except CloudError as e:
            self.log('Did not find the @(Model.ObjectName) instance.')
        if found is True:
            return response.as_dict()
@EmptyLine
        return False
@EmptyLine
@EmptyLine
def main():
    """Main execution"""
    AzureRM@(Model.ModuleOperationNameUpper)()
@EmptyLine
if __name__ == '__main__':
    main()
