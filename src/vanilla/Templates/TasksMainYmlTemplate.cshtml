@using AutoRest.Ansible.vanilla.Templates
@using System.Linq
@using AutoRest.Core.Model
@using AutoRest.Core.Utilities
@using AutoRest.Ansible
@using AutoRest.Ansible.Model
@inherits AutoRest.Ansible.PythonTemplate<AutoRest.Ansible.Model.CodeModelAnsibleMap>
- name: Prepare random number
  set_fact:
    random_postfix: "{{ 1000 | random }}"
  run_once: yes
@if (Model.CanDelete())
{
@EmptyLine
    foreach (var line in Model.GetModuleTestDelete(true, true))
    {
@:@(line)
    }
@:    state: absent
@:  check_only: yes
@:  register: output
@:- name: Assert the state has changed
@:  assert:
@:    that:
@:      - output.changed == false
@EmptyLine
    foreach (var line in Model.GetModuleTestDelete(true, false))
    {
@:@(line)
    }
@:    state: absent
@:  register: output
@:- name: Assert the state has changed
@:  assert:
@:    that:
@:      - output.changed == false
}
@EmptyLine
@foreach (var line in Model.GetModuleTestCreate(true))
{
@:@(line)
}
  check_mode: yes
  register: output
- name: Assert the resource instance is well created
  assert:
    that:
      - output.changed
@EmptyLine
@foreach (var line in Model.GetModuleTestCreate())
{
@:@(line)
}
  register: output
- name: Assert the resource instance is well created
  assert:
    that:
      - output.changed
      - output.@(Model.AssertStateVariable) == '@(Model.AssertStateExpectedValue)'
@EmptyLine
@foreach (var line in Model.ModuleTestUpdateCheckMode)
{
@:@(line)
}
  register: output
- name: Assert the state has not changed
  assert:
    that:
      - output.changed == false
@EmptyLine
@foreach (var line in Model.ModuleTestUpdate)
{
@:@(line)
}
  register: output
- name: Assert the state has not changed
  assert:
    that:
      - output.changed == false
      - output.@(Model.AssertStateVariable) == '@(Model.AssertStateExpectedValue)'
@if (Model.CanDelete())
{
@EmptyLine
    foreach (var line in Model.ModuleTestDeleteCheckMode)
    {
@:@(line)
    }
@:    state: absent
@:  check_mode: yes
@:  register: output
@:- name: Assert the state has changed
@:  assert:
@:    that:
@:      - output.changed
@EmptyLine
    foreach (var line in Model.ModuleTestDelete)
    {
@:@(line)
    }
@:    state: absent
@:  register: output
@:- name: Assert the state has changed
@:  assert:
@:    that:
@:      - output.changed
}
@if (Model.HasPrerequisites())
{
@EmptyLine
    foreach (var line in Model.ModuleTestDeleteClearPrerequisites)
    {
@:@(line)
    }
@:    state: absent
}
